<?xml version="1.0" encoding="UTF-8"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Snowl.
   -
   - The Initial Developer of the Original Code is Mozilla.
   - Portions created by the Initial Developer are Copyright (C) 2008
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Myk Melez <myk@mozilla.org>
   -   alta88 <alta88@gmail.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://snowl/content/browser.css" type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://snowl/locale/browser.dtd">

<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         id="snowlBrowserOverlay">

  <script type="application/javascript" src="chrome://snowl/content/browser.js"/>
  <!-- Include strands.js and subscribe.js for onImportOPML -->
  <script type="application/javascript" src="chrome://snowl/content/strands.js"/>
  <script type="application/javascript" src="chrome://snowl/content/subscribe.js"/>

  <menupopup id="viewSidebarMenu">
    <menuitem observes="viewSnowlList" label="&listViewSidebarMenuItem.label;"
              accesskey="&listViewSidebarMenuItem.accesskey;"/>
    <menuitem observes="viewSnowlStream" label="&streamViewSidebarMenuItem.label;"
              accesskey="&streamViewSidebarMenuItem.accesskey;"/>
  </menupopup>

  <broadcasterset id="mainBroadcasterSet"> 
    <broadcaster id="viewSnowlList"
                 autoCheck="false"
                 type="checkbox"
                 group="sidebar"
                 sidebarurl="chrome://snowl/content/list-sidebar.xul"
                 sidebartitle="&listViewSidebar.label;"
                 oncommand="toggleSidebar('viewSnowlList')"/>
    <broadcaster id="viewSnowlStream"
                 autoCheck="false"
                 type="checkbox"
                 group="sidebar"
                 sidebarurl="chrome://snowl/content/stream.xul"
                 sidebartitle="&streamViewSidebar.label;"
                 oncommand="toggleSidebar('viewSnowlStream')"/>
    <broadcaster id="viewSnowlRiver"
                 autoCheck="false"
                 type="checkbox"
                 persist="checked"
                 oncommand="Snowl.onRiverView()"/>
  </broadcasterset>

  <menupopup id="menu_ToolsPopup">
    <menu id="snowlMenu"
          class="menu-iconic"
          label="&snowlMenu.label;"
          accesskey="&snowlMenu.accesskey;"
          insertbefore="browserToolsSeparator">
      <menupopup id="snowlMenuPopup"
                 onpopupshowing="Snowl.onSnowlMenuPopupShowing(event)"
                 onpopuphiding="Snowl.onSnowlMenuPopupHiding(event)">
        <menuitem observes="viewSnowlList" label="&listView.label;"
                  accesskey="&listView.accesskey;"/>
        <menuitem observes="viewSnowlStream" label="&streamView.label;"
                  accesskey="&streamView.accesskey;"/>
        <menuseparator/>
        <menuitem observes="viewSnowlRiver"
                  label="&riverView.label;"
                  accesskey="&riverView.accesskey;"/>
        <menuseparator/>
        <menuitem label="&checkForNewMessages.label;"
                  accesskey="&checkForNewMessages.accesskey;"
                  oncommand="Snowl.onCheckForNewMessages()"/>
        <menuseparator/>
        <menu id="snowlLayoutMenu"
              label="&snowlLayoutMenu.label;"
              popup="snowlLayoutPopup"
              accesskey="&snowlLayoutMenu.accesskey;">
  
          <menupopup id="snowlLayoutPopup"
                     onpopupshowing="Snowl.onLayoutPopupShowing(event)">
            <menuitem id="snowlLayoutMenuitemClassic"
                      label="&layoutClassic.label;"
                      type="radio"
                      checked="true"
                      accesskey="&layoutClassic.accesskey;"
                      name="snowlLayoutMenuitemGroup"
                      oncommand="SnowlMessageView.switchLayout(SnowlMessageView.kClassicLayout)"/>
            <menuitem id="snowlLayoutMenuitemVertical"
                      label="&layoutVertical.label;"
                      type="radio"
                      accesskey="&layoutVertical.accesskey;"
                      name="snowlLayoutMenuitemGroup"
                      oncommand="SnowlMessageView.switchLayout(SnowlMessageView.kVerticalLayout)"/>
            <menuitem id="snowlLayoutMenuitemWideMessage"
                      label="&layoutWideMessage.label;"
                      type="radio"
                      accesskey="&layoutWideMessage.accesskey;"
                      name="snowlLayoutMenuitemGroup"
                      oncommand="SnowlMessageView.switchLayout(SnowlMessageView.kWideMessageLayout)"/>
            <menuitem id="snowlLayoutMenuitemWideThread"
                      label="&layoutWideThread.label;"
                      type="radio"
                      accesskey="&layoutWideThread.accesskey;"
                      name="snowlLayoutMenuitemGroup"
                      oncommand="SnowlMessageView.switchLayout(SnowlMessageView.kWideThreadLayout)"/>
            <menuitem id="snowlLayoutMenuitemStacked"
                      label="&layoutStacked.label;"
                      type="radio"
                      accesskey="&layoutStacked.accesskey;"
                      name="snowlLayoutMenuitemGroup"
                      oncommand="SnowlMessageView.switchLayout(SnowlMessageView.kStackedLayout)"/>
            <menuseparator/>
            <menuitem id="snowlHeaderMenuitemNone"
                      label="&headerNone.label;"
                      type="radio"
                      accesskey="&headerNone.accesskey;"
                      name="snowlHeaderMenuitemGroup"
                      headerType="Snowl.kNoHeader"
                      oncommand="Snowl._toggleHeader(event)"/>
            <menuitem id="snowlHeaderMenuitemBrief"
                      label="&headerBrief.label;"
                      type="radio"
                      accesskey="&headerBrief.accesskey;"
                      name="snowlHeaderMenuitemGroup"
                      headerType="Snowl.kBriefHeader"
                      oncommand="Snowl._toggleHeader(event)"/>
            <menuitem id="snowlHeaderMenuitemFull"
                      label="&headerFull.label;"
                      type="radio"
                      accesskey="&headerFull.accesskey;"
                      name="snowlHeaderMenuitemGroup"
                      headerType="Snowl.kFullHeader"
                      oncommand="Snowl._toggleHeader(event)"/>
            <menuseparator/>
            <menuitem id="snowlToolbarMenuitem"
                      label="&toolbar.label;"
                      type="checkbox"
                      accesskey="&toolbar.accesskey;"
                      name="snowlToolbar"
                      oncommand="Snowl._toggleToolbar(event)"/>
            <menuitem id="snowlViewToolbarMenuitem"
                      label="&viewtoolbar.label;"
                      type="checkbox"
                      checked="true"
                      persist="checked"
                      accesskey="&viewtoolbar.accesskey;"
                      name="snowlViewToolbar"
                      oncommand="Snowl._toggleToolbar(event)"/>
          </menupopup>
  
        </menu>
        <menuseparator/>
        <menuitem label="&subscribe.label;" accesskey="&subscribe.accesskey;"
                  oncommand="Snowl.openSnowlPreferences('subscribe');"/>
        <menuitem label="&importOPML.label;" accesskey="&importOPML.accesskey;"
                  oncommand="Snowl.onImportOPML()"/>
        <menuitem label="&exportOPML.label;" accesskey="&exportOPML.accesskey;"
                  oncommand="Snowl.onExportOPML()"/>
        <!-- Commented out because we don't currently have any preferences
           - (except the Subscribe pane, but users access that via another
           - menu item). -->
        <!--<menuseparator/>-->
        <!--<menuitem label="&options.label;" accesskey="&options.accesskey;"-->
        <!--          oncommand="Snowl.openSnowlPreferences();"/>-->
      </menupopup>
    </menu>
  </menupopup>

  <toolbarpalette id="BrowserToolbarPalette">
    <toolbarbutton id="snowlToolbarButton"
                   type="menu"
                   class="toolbarbutton-1"
                   label="&snowlMenu.label;"
                   onmousedown="Snowl.onSnowlButtonMouseDown(event)"
                   tooltiptext="&snowlMenu.label;"/>

    <toolbarbutton id="snowlToggleListButton"
                   observes="viewSnowlList"
                   class="toolbarbutton-1"
                   label="&toggleList.label;"
                   type="checkbox"
                   oncommand="toggleSidebar('viewSnowlList')"
                   tooltiptext="&toggleList.tooltip;"/>

    <toolbarbutton id="snowlToggleStreamButton"
                   observes="viewSnowlStream"
                   class="toolbarbutton-1"
                   label="&toggleStream.label;"
                   type="checkbox"
                   oncommand="toggleSidebar('viewSnowlStream')"
                   tooltiptext="&toggleStream.tooltip;"/>

    <toolbarbutton id="snowlToggleRiverButton"
                   observes="viewSnowlRiver"
                   class="toolbarbutton-1"
                   label="&toggleRiver.label;"
                   type="checkbox"
                   oncommand="Snowl.onRiverView()"
                   tooltiptext="&toggleRiver.tooltip;"/>

    <toolbarbutton id="snowlToggleHeaderButton"
                   class="toolbarbutton-1"
                   oncommand="Snowl._toggleHeader('Toggle')"
                   onmouseover="Snowl.onSnowlToggleHeaderButtonMouseover(event)"
                   label="&toggleHeader.label;"
                   snowlHeader="full"
                   persist="disabled"
                   tooltiptext="&toggleHeader.tooltip;"/>
  </toolbarpalette>>

  <statusbar id="status-bar">
    <statusbarpanel id="snowlStatusbarButton"
                    class="statusbarpanel-menu-iconic"
                    label="&snowlMenu.label;"
                    onmousedown="Snowl.onSnowlButtonMouseDown(event)"
                    insertbefore="statusbar-display">
    </statusbarpanel>
  </statusbar>

</overlay>
