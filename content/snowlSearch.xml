<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Mozilla browser.
   -
   - The Initial Developer of the Original Code is Mozilla.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   alta88 <alta88@gmail.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % globalDTD  SYSTEM "chrome://global/locale/global.dtd">
   %globalDTD;
   <!ENTITY % searchDTD SYSTEM "chrome://snowl/locale/collections.dtd">
   %searchDTD;
]>

<bindings id="snowlSearchBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <!-- Binding attached to #searchbar -->
  <binding id="search" extends="chrome://browser/content/search/search.xml#searchbar">
    <implementation>

      <constructor><![CDATA[
        // Register the engine if needed.
        this._registerSearchEngine();
      ]]></constructor>


      <!-- Overload from search.xml -->
      <method name="doSearch">
        <parameter name="aData"/>
        <parameter name="aWhere"/>
        <body><![CDATA[
          // null parameter below specifies HTML response for search
          var submission = this.currentEngine.getSubmission(aData, null);
          let openURI;
          if (this.currentEngine.name == this.SNOWL_ENGINE_NAME)
            openURI = submission.uri.spec.replace(this.SNOWL_ENGINE_TEMPLATE,
                                                  this.SNOWL_ENGINE_URI);
          else
            openURI = submission.uri.spec;

          openUILinkIn(openURI, aWhere, null, submission.postData);
        ]]></body>
      </method>

      <!--  Search engine initialization -->
      <field name="SNOWL_ENGINE_NAME">"Snowl"</field>
      <field name="SNOWL_ENGINE_ICON">"chrome://snowl/content/icons/snowl-16.png"</field>
      <field name="SNOWL_ENGINE_ALIAS">"snowl"</field>
      <field name="SNOWL_ENGINE_DESCRIPTION">"Search Snowl Messages"</field>
      <field name="SNOWL_ENGINE_TEMPLATE">"http://snowl/content/river.xul?"</field>
      <field name="SNOWL_ENGINE_URI">"chrome://snowl/content/river.xul?"</field>

      <method name="_registerSearchEngine">
        <body><![CDATA[
          if (!this.searchService.getEngineByName(this.SNOWL_ENGINE_NAME)) {
            let iconDataUri = this._convertToDataUri(this.SNOWL_ENGINE_ICON);
            this.searchService.addEngineWithDetails(this.SNOWL_ENGINE_NAME,
                                                    iconDataUri,
                                                    this.SNOWL_ENGINE_ALIAS,
                                                    this.SNOWL_ENGINE_DESCRIPTION,
                                                    "GET",
                                                    this.SNOWL_ENGINE_TEMPLATE);
            let addedEngine = this.searchService.getEngineByName(this.SNOWL_ENGINE_NAME);
            addedEngine.addParam("period", "all", null);
            addedEngine.addParam("collection", "all", null);
            addedEngine.addParam("filter", "{searchTerms}", null);
          }
        ]]></body>
      </method>

      <method name="_convertToDataUri">
        <parameter name="aIconUri"/>
        <body><![CDATA[
          try {
            let ioserv = Cc["@mozilla.org/network/io-service;1"].
                         getService(Ci.nsIIOService);
            let channel = ioserv.newChannel(aIconUri, 0, null);
            let stream = channel.open();

            if (channel instanceof Ci.nsIHttpChannel && channel.responseStatus != 200)
              return null;

            let bstream = Cc["@mozilla.org/binaryinputstream;1"].
                          createInstance(Ci.nsIBinaryInputStream);
            bstream.setInputStream(stream);

            let size = 0;
            let file_data = "";
            while(size = bstream.available())
               file_data += bstream.readBytes(size);
            bstream.close();

            let data = btoa(file_data);
            return "data:image/x-icon;base64," + data;
          }
          catch(e) {
            throw(e);
            return null;
          }
        ]]></body>
      </method>

    </implementation>
  </binding>

  <!-- Binding attached to #snowlFilter buttons <deck> -->
  <binding id="searchBarButtons"
           extends="chrome://global/content/bindings/general.xml#deck">
    <content>
      <xul:toolbarbutton id="snowlListViewSearchButton"
                         class="tabbable"
                         chromedir="&locale.dir;"
                         context=""
                         xbl:inherits="disabled"
                         oncommand="document.getBindingParent(this).openSearchPopup(event);">
        <xul:menupopup id="message-search-popup">
          <xul:menuitem id="searchMessagesMenuitem"
                        label="&searchMessages.label;"
                        accesskey="&searchMessages.accesskey;"
                        type="radio"
                        name="searchPopup"
                        value="messages"
                        oncommand="document.getBindingParent(this).itemChecked(event);"/>
          <xul:menuitem id="searchCollectionsMenuitem"
                        label="&searchCollections.label;"
                        accesskey="&searchCollections.accesskey;"
                        type="radio"
                        name="searchPopup"
                        value="collections"
                        oncommand="document.getBindingParent(this).itemChecked(event);"/>
          <xul:menuseparator id="searchHelpSep"/>
          <xul:menuitem id="searchHelpMenuitem"
                        label="&searchHelp.label;"
                        accesskey="&searchHelp.accesskey;"
                        oncommand="CollectionsView.onSearchHelp();"/>
        </xul:menupopup>
        <xul:stack flex="1">
          <xul:hbox align="center">
            <xul:image class="textbox-search-icon" xbl:inherits="src"/>
          </xul:hbox>
          <xul:hbox align="center">
            <xul:image class="searchbar-dropmarker-image"/>
          </xul:hbox>
        </xul:stack>
      </xul:toolbarbutton>

      <xul:image class="textbox-search-clear"
                 onclick="searchFilter._clearSearch();"
                 xbl:inherits="disabled"
                 chromedir="&locale.dir;"/>
      <!-- Can't exclude/override nodes via xbl, so leave these beyond the deck's index -->
      <children/>
    </content>

    <implementation>
      <constructor><![CDATA[
        // Set checkstate of menupopup items.
        if (this.searchType == "messages")
          document.getElementById("searchMessagesMenuitem").
                   setAttribute('checked', true);
        else
          document.getElementById("searchCollectionsMenuitem").
                   setAttribute('checked', true);

        // Need to create string bundle manually instead of using <xul:stringbundle/>
        // see bug 63370 for details (per other workarounds).
        var bundleURL = "chrome://snowl/locale/search.properties";
        var appLocale = Cc["@mozilla.org/intl/nslocaleservice;1"].
                        getService(Ci.nsILocaleService).
                        getApplicationLocale();
        this._strings = Cc["@mozilla.org/intl/stringbundle;1"].
                        getService(Ci.nsIStringBundleService).
                        createBundle(bundleURL, appLocale);

        this.setEmptyText();
      ]]></constructor>

      <field name="searchFilter">document.getElementById("snowlFilter");</field>

      <field name="_strings">null</field>

      <field name="_searchFilterEmptytext" readonly="true"><![CDATA[({
        0: this._strings.GetStringFromName("searchMessagesEmptyText"),
        1: this._strings.GetStringFromName("searchCollectionsEmptyText")
      })]]></field>

      <property name="searchType"
                onget="let st = this.searchFilter.getAttribute('searchtype');
                       return st;"
                onset="this.searchFilter.setAttribute('searchtype', val);
                       document.persist('searchFilter', 'searchtype');
                       return val;">
      </property>

      <method name="itemChecked">
        <parameter name="aEvent"/>
        <body><![CDATA[
          this.searchType = aEvent.target.value;
          this.setEmptyText();
        ]]></body>
      </method>

      <method name="openSearchPopup">
        <parameter name="aEvent"/>
        <body><![CDATA[
          aEvent.stopPropagation();
          let mpopup = document.getElementById("message-search-popup");
          mpopup.openPopup(aEvent.target, "after_start");
        ]]></body>
      </method>

      <method name="setEmptyText">
        <body><![CDATA[
          let index = this.searchType == "messages" ? 0 : 1;
          this.searchFilter.setAttribute("emptytext",
                                         this._searchFilterEmptytext[index]);
          let input = document.getAnonymousElementByAttribute(this.searchFilter,
                                                              "anonid",
                                                              "input");
          input.focus();
          input.blur();
        ]]></body>
      </method>
    </implementation>
  </binding>

</bindings>
