<?xml version="1.0"?>

<bindings id="snowlSearchBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <!-- Binding attached to #searchbar -->
  <binding id="search" extends="chrome://browser/content/search/search.xml#searchbar">
    <implementation>

      <constructor><![CDATA[
        // Register the engine if needed.
        this._registerSearchEngine();
      ]]></constructor>


      <!-- Overload from search.xml -->
      <method name="doSearch">
        <parameter name="aData"/>
        <parameter name="aWhere"/>
        <body><![CDATA[
          // null parameter below specifies HTML response for search
          var submission = this.currentEngine.getSubmission(aData, null);
          let openURI;
          if (this.currentEngine.name == this.SNOWL_ENGINE_NAME)
            openURI = submission.uri.spec.replace(this.SNOWL_ENGINE_TEMPLATE,
                                                  this.SNOWL_ENGINE_URI);
          else
            openURI = submission.uri.spec;

          openUILinkIn(openURI, aWhere, null, submission.postData);
        ]]></body>
      </method>

      <!--  Search engine initialization -->
      <field name="SNOWL_ENGINE_NAME">"Snowl"</field>
      <field name="SNOWL_ENGINE_ICON">"chrome://snowl/content/icons/snowl-16.png"</field>
      <field name="SNOWL_ENGINE_ALIAS">"snowl"</field>
      <field name="SNOWL_ENGINE_DESCRIPTION">"Search Snowl Messages"</field>
      <field name="SNOWL_ENGINE_TEMPLATE">"http://snowl/content/river.xul?"</field>
      <field name="SNOWL_ENGINE_URI">"chrome://snowl/content/river.xul?"</field>

      <method name="_registerSearchEngine">
        <body><![CDATA[
          if (!this.searchService.getEngineByName(this.SNOWL_ENGINE_NAME)) {
            let iconDataUri = this._convertToDataUri(this.SNOWL_ENGINE_ICON);
            this.searchService.addEngineWithDetails(this.SNOWL_ENGINE_NAME,
                                                    iconDataUri,
                                                    this.SNOWL_ENGINE_ALIAS,
                                                    this.SNOWL_ENGINE_DESCRIPTION,
                                                    "GET",
                                                    this.SNOWL_ENGINE_TEMPLATE);
            let addedEngine = this.searchService.getEngineByName(this.SNOWL_ENGINE_NAME);
            addedEngine.addParam("period", "all", null);
            addedEngine.addParam("collection", "all", null);
            addedEngine.addParam("filter", "{searchTerms}", null);
          }
        ]]></body>
      </method>

      <method name="_convertToDataUri">
        <parameter name="aIconUri"/>
        <body><![CDATA[
          try {
            let ioserv = Cc["@mozilla.org/network/io-service;1"].
                         getService(Ci.nsIIOService);
            let channel = ioserv.newChannel(aIconUri, 0, null);
            let stream = channel.open();

            if (channel instanceof Ci.nsIHttpChannel && channel.responseStatus != 200)
              return null;

            let bstream = Cc["@mozilla.org/binaryinputstream;1"].
                          createInstance(Ci.nsIBinaryInputStream);
            bstream.setInputStream(stream);

            let size = 0;
            let file_data = "";
            while(size = bstream.available())
               file_data += bstream.readBytes(size);
            bstream.close();

            let data = btoa(file_data);
            return "data:image/x-icon;base64," + data;
          }
          catch(e) {
            throw(e);
            return null;
          }
        ]]></body>
      </method>

    </implementation>
  </binding>

</bindings>
